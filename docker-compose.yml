version: '3.8'

services:
  traefik:
    image: traefik:v3.0
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic:/etc/traefik/dynamic
      - ./traefik/acme.json:/etc/traefik/acme.json
      - ./monitoring/traefik-logs:/var/log/traefik
    depends_on:
      - postgres
      - backend
      - frontend
      - email-service
      - telegram-service
    networks:
      - crm-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.crm-synergy.ru`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: crm_system
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/postgres-logs:/var/log/postgresql
    networks:
      - crm-network
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
       interval: 10s
       timeout: 5s
       retries: 5
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  backend:
    build:
      context: ./crm-system
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MANAGEMENT_HEALTH_MAIL_ENABLED=false
      - SERVER_PORT=8084
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
      - MANAGEMENT_ENDPOINTS_WEB_BASEPATH=/actuator
      - MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED=true
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crm-network
    volumes:
      - ./monitoring/backend-logs:/var/log/admin-panel
    healthcheck:
       test: ["CMD", "curl", "-f", "http://0.0.0.0:8084/actuator/health"]
       interval: 30s
       timeout: 10s
       retries: 3
       start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8084"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  frontend:
    image: application-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - crm-network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./monitoring/frontend-logs:/var/log/admin-panel
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.crm-synergy.ru`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.priority=15"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  email-service:
    image: ${REGISTRY}/${IMAGE_NAME}/email-service:latest
    env_file:
      - .env
    environment:
      - SERVER_PORT=8081
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8081/ | grep -q \"404\\|200\" || exit 1"]
      interval: ${SPRING_BOOT_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${SPRING_BOOT_HEALTHCHECK_TIMEOUT:-10s}
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.email-service.rule=Host(`email.crm-synergy.ru`)"
      - "traefik.http.routers.email-service.entrypoints=websecure"
      - "traefik.http.routers.email-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.email-service.loadbalancer.server.port=8081"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  telegram-service:
    image: ${REGISTRY}/${IMAGE_NAME}/telegram-service:latest
    env_file:
      - .env
    environment:
      - SERVER_PORT=8082
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8082/ | grep -q \"404\\|200\" || exit 1"]
      interval: ${SPRING_BOOT_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${SPRING_BOOT_HEALTHCHECK_TIMEOUT:-10s}
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.telegram-service.rule=Host(`telegram.crm-synergy.ru`)"
      - "traefik.http.routers.telegram-service.entrypoints=websecure"
      - "traefik.http.routers.telegram-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.telegram-service.loadbalancer.server.port=8082"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  # Monitoring services
  prometheus:
    image: prom/prometheus:v2.47.0
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/admin-panel-rules.yml:/etc/prometheus/admin-panel-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - crm-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.crm-synergy.ru`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana-enterprise:10.1.0
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/admin-panel-dashboard.json:/var/lib/grafana/dashboards/admin-panel-dashboard.json
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - crm-network
    depends_on:
      - prometheus
      - loki
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.crm-synergy.ru`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  loki:
    image: grafana/loki:2.9.1
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - crm-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.loki.rule=Host(`loki.crm-synergy.ru`)"
      - "traefik.http.routers.loki.entrypoints=websecure"
      - "traefik.http.routers.loki.tls.certresolver=letsencrypt"
      - "traefik.http.services.loki.loadbalancer.server.port=3100"

  promtail:
    image: grafana/promtail:2.9.1
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - ./monitoring/backend-logs:/var/log/admin-panel
      - ./monitoring/frontend-logs:/var/log/admin-panel
      - ./monitoring/postgres-logs:/var/log/postgresql
      - ./monitoring/traefik-logs:/var/log/traefik
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - crm-network
    depends_on:
      - loki

networks:
  crm-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:
# End of file