version: '3.8'

services:
  traefik:
    image: traefik:v3.0
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic:/etc/traefik/dynamic
      - ./traefik/acme.json:/etc/traefik/acme.json
    depends_on:
      - postgres
      - backend
      - frontend
      - email-service
      - telegram-service
    networks:
      - crm-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.crm-synergy.ru`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: crm_system
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - crm-network
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
       interval: 10s
       timeout: 5s
       retries: 5
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  backend:
    build:
      context: ./crm-system
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MANAGEMENT_HEALTH_MAIL_ENABLED=false
      - SERVER_PORT=8084
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crm-network
    healthcheck:
       test: ["CMD", "curl", "-f", "http://0.0.0.0:8084/actuator/health"]
       interval: 30s
       timeout: 10s
       retries: 3
       start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8084"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  frontend:
    image: application-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - crm-network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  email-service:
    image: ${REGISTRY}/${IMAGE_NAME}/email-service:latest
    env_file:
      - .env
    environment:
      - SERVER_PORT=8081
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8081/ | grep -q \"404\\|200\" || exit 1"]
      interval: ${SPRING_BOOT_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${SPRING_BOOT_HEALTHCHECK_TIMEOUT:-10s}
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.email-service.rule=Host(`email.crm-synergy.ru`)"
      - "traefik.http.routers.email-service.entrypoints=websecure"
      - "traefik.http.routers.email-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.email-service.loadbalancer.server.port=8081"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

  telegram-service:
    image: ${REGISTRY}/${IMAGE_NAME}/telegram-service:latest
    env_file:
      - .env
    environment:
      - SERVER_PORT=8082
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8082/ | grep -q \"404\\|200\" || exit 1"]
      interval: ${SPRING_BOOT_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${SPRING_BOOT_HEALTHCHECK_TIMEOUT:-10s}
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.telegram-service.rule=Host(`telegram.crm-synergy.ru`)"
      - "traefik.http.routers.telegram-service.entrypoints=websecure"
      - "traefik.http.routers.telegram-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.telegram-service.loadbalancer.server.port=8082"
    # Add restart policy to ensure containers restart if they fail
    restart: unless-stopped

networks:
  crm-network:
    driver: bridge

volumes:
  postgres_data:
# End of file