import React, { useState } from 'react';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormLabel,
  Chip,
  Alert,
  Snackbar,
} from '@mui/material';
import { Download, Assessment, BarChart, PieChart, Timeline } from '@mui/icons-material';
import adminService from '@/services/adminService';

const AdminReportsPage: React.FC = () => {
  const [reportType, setReportType] = useState('students');
  const [format, setFormat] = useState('xlsx');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [openDialog, setOpenDialog] = useState(false);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');

  const handleGenerateReport = async () => {
    try {
      console.log('üîÑ Generating report:', { reportType, format, startDate, endDate });
      
      // Generate report through the backend API
      let reportData: any;
      switch (reportType) {
        case 'students':
          reportData = await adminService.generateStudentsReport(startDate, endDate);
          break;
        case 'teachers':
          reportData = await adminService.generateTeachersReport(startDate, endDate);
          break;
        case 'lessons':
          reportData = await adminService.generateLessonsReport(startDate, endDate);
          break;
        default:
          throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞');
      }
      
      // Create a blob from the response data
      const blob = new Blob([reportData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `report_${reportType}_${new Date().toISOString().slice(0, 10)}.${format}`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      setOpenDialog(false);
      showSnackbar('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–∫–∞—á–∞–Ω!');
    } catch (err: any) {
      console.error('‚ùå Error generating report:', err);
      showSnackbar('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  const showSnackbar = (message: string) => {
    setSnackbarMessage(message);
    setSnackbarOpen(true);
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ mb: 3 }}>
        <Typography variant="h5">–û—Ç—á–µ—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</Typography>
        <Typography variant="body1" color="textSecondary">
          –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        </Typography>
      </Box>

      <Grid container spacing={3}>
        <Grid item xs={12} md={8}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" sx={{ mb: 3 }}>
              <Assessment sx={{ mr: 1, verticalAlign: 'middle' }} />
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            </Typography>
            
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <Paper 
                  sx={{ 
                    p: 2, 
                    height: '100%',
                    cursor: 'pointer',
                    '&:hover': {
                      boxShadow: 6,
                    }
                  }}
                  onClick={() => {
                    setReportType('students');
                    setOpenDialog(true);
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <PieChart sx={{ mr: 1, color: 'primary.main' }} />
                    <Typography variant="h6">–°—Ç—É–¥–µ–Ω—Ç—ã</Typography>
                  </Box>
                  <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
                    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                  </Typography>
                </Paper>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <Paper 
                  sx={{ 
                    p: 2, 
                    height: '100%',
                    cursor: 'pointer',
                    '&:hover': {
                      boxShadow: 6,
                    }
                  }}
                  onClick={() => {
                    setReportType('teachers');
                    setOpenDialog(true);
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <BarChart sx={{ mr: 1, color: 'secondary.main' }} />
                    <Typography variant="h6">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</Typography>
                  </Box>
                  <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
                    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                  </Typography>
                </Paper>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <Paper 
                  sx={{ 
                    p: 2, 
                    height: '100%',
                    cursor: 'pointer',
                    '&:hover': {
                      boxShadow: 6,
                    }
                  }}
                  onClick={() => {
                    setReportType('lessons');
                    setOpenDialog(true);
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Timeline sx={{ mr: 1, color: 'info.main' }} />
                    <Typography variant="h6">–£—Ä–æ–∫–∏</Typography>
                  </Box>
                  <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
                    –ò—Å—Ç–æ—Ä–∏—è —É—Ä–æ–∫–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                  </Typography>
                </Paper>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <Paper 
                  sx={{ 
                    p: 2, 
                    height: '100%',
                    cursor: 'pointer',
                    '&:hover': {
                      boxShadow: 6,
                    }
                  }}
                  onClick={() => {
                    setReportType('finances');
                    setOpenDialog(true);
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <BarChart sx={{ mr: 1, color: 'success.main' }} />
                    <Typography variant="h6">–§–∏–Ω–∞–Ω—Å—ã</Typography>
                  </Box>
                  <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
                    –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º –∏ —Ä–∞—Å—Ö–æ–¥–∞–º
                  </Typography>
                </Paper>
              </Grid>
            </Grid>
          </Paper>
        </Grid>
        
        <Grid item xs={12} md={4}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" sx={{ mb: 2 }}>
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </Typography>
            <Typography variant="body2" sx={{ mb: 2 }}>
              –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.
            </Typography>
            <Typography variant="body2" sx={{ mb: 2 }}>
              –í—Å–µ –æ—Ç—á–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx) –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –º–æ–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
            </Typography>
            <Typography variant="body2">
              –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è.
            </Typography>
            
            <Box sx={{ mt: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
              </Typography>
              
              <Box sx={{ mb: 1 }}>
                <Chip 
                  label="–°—Ç—É–¥–µ–Ω—Ç—ã_2025-09-18.xlsx" 
                  variant="outlined" 
                  size="small" 
                  sx={{ mr: 1, mb: 1 }}
                />
                <Chip 
                  label="–£—Ä–æ–∫–∏_2025-09-17.xlsx" 
                  variant="outlined" 
                  size="small" 
                  sx={{ mr: 1, mb: 1 }}
                />
                <Chip 
                  label="–§–∏–Ω–∞–Ω—Å—ã_2025-09-16.xlsx" 
                  variant="outlined" 
                  size="small" 
                  sx={{ mr: 1, mb: 1 }}
                />
              </Box>
              
              <Button variant="outlined" fullWidth sx={{ mt: 2 }}>
                –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã
              </Button>
            </Box>
          </Paper>
        </Grid>
      </Grid>

      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞</DialogTitle>
        <DialogContent>
          <FormControl component="fieldset" sx={{ mb: 2 }}>
            <FormLabel component="legend">–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</FormLabel>
            <RadioGroup
              value={format}
              onChange={(e) => setFormat(e.target.value)}
            >
              <FormControlLabel value="xlsx" control={<Radio />} label="Excel (.xlsx)" />
              <FormControlLabel value="csv" control={<Radio />} label="CSV (.csv)" />
              <FormControlLabel value="pdf" control={<Radio />} label="PDF (.pdf)" />
            </RadioGroup>
          </FormControl>
          
          <TextField
            label="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"
            type="date"
            fullWidth
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            InputLabelProps={{
              shrink: true,
            }}
            sx={{ mb: 2 }}
          />
          
          <TextField
            label="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"
            type="date"
            fullWidth
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
            InputLabelProps={{
              shrink: true,
            }}
            sx={{ mb: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button 
            onClick={handleGenerateReport} 
            variant="contained"
            startIcon={<Download />}
          >
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        message={snackbarMessage}
      />
    </Box>
  );
};

export default AdminReportsPage;