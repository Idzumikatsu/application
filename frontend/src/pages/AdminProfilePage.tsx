import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  Box,
  Typography,
  Paper,
  Grid,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Tabs,
  Tab,
  Alert,
  Snackbar,
  IconButton,
  InputAdornment,
} from '@mui/material';
import { Save, Visibility, VisibilityOff, Refresh } from '@mui/icons-material';
import { RootState, AppDispatch } from '@/store';
import { logout } from '@/store/authSlice';
import AuthService from '@/services/authService';

const AdminProfilePage: React.FC = () => {
  const { user } = useSelector((state: RootState) => state.auth);
  const dispatch: AppDispatch = useDispatch();
  const [activeTab, setActiveTab] = useState(0);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'error'>('success');

  // Personal info
  const [personalInfo, setPersonalInfo] = useState({
    firstName: user?.firstName || '',
    lastName: user?.lastName || '',
    email: user?.email || '',
    phone: user?.phone || '',
    telegramUsername: user?.telegramUsername || '',
  });

  // Password change
  const [passwordChange, setPasswordChange] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
    showCurrentPassword: false,
    showNewPassword: false,
    showConfirmPassword: false,
  });

  // Preferences
  const [preferences, setPreferences] = useState({
    theme: 'light',
    language: 'ru',
    notifications: {
      email: true,
      telegram: true,
      push: false,
    },
    timezone: 'Europe/Moscow',
  });

  const handleSavePersonalInfo = async () => {
    try {
      console.log('üîÑ Saving personal info:', personalInfo);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
      showSnackbar('–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
    } catch (err: any) {
      console.error('‚ùå Error saving personal info:', err);
      showSnackbar('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
    }
  };

  const handleChangePassword = async () => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (passwordChange.newPassword !== passwordChange.confirmPassword) {
        showSnackbar('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        return;
      }
      
      if (passwordChange.newPassword.length < 8) {
        showSnackbar('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
      }
      
      console.log('üîÑ Changing password');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setPasswordChange({
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
        showCurrentPassword: false,
        showNewPassword: false,
        showConfirmPassword: false,
      });
      
      showSnackbar('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', 'success');
    } catch (err: any) {
      console.error('‚ùå Error changing password:', err);
      showSnackbar('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
    }
  };

  const handleSavePreferences = async () => {
    try {
      console.log('üîÑ Saving preferences:', preferences);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      await new Promise(resolve => setTimeout(resolve, 500));
      
      showSnackbar('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success');
    } catch (err: any) {
      console.error('‚ùå Error saving preferences:', err);
      showSnackbar('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
    }
  };

  const handleLogout = () => {
    AuthService.logout();
    dispatch(logout());
  };

  const showSnackbar = (message: string, severity: 'success' | 'error') => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ mb: 3 }}>
        <Typography variant="h5">–ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</Typography>
        <Typography variant="body1" color="textSecondary">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        </Typography>
      </Box>

      <Tabs
        value={activeTab}
        onChange={(e, newValue) => setActiveTab(newValue)}
        indicatorColor="secondary"
        textColor="inherit"
        variant="scrollable"
        scrollButtons="auto"
        sx={{ mb: 3 }}
      >
        <Tab label="–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" />
        <Tab label="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è" />
        <Tab label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" />
        <Tab label="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" />
      </Tabs>

      {activeTab === 0 && (
        <Grid container spacing={3}>
          <Grid item xs={12} md={8}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </Typography>
              
              <TextField
                fullWidth
                label="–ò–º—è"
                value={personalInfo.firstName}
                onChange={(e) => setPersonalInfo({...personalInfo, firstName: e.target.value})}
                sx={{ mb: 2 }}
              />
              
              <TextField
                fullWidth
                label="–§–∞–º–∏–ª–∏—è"
                value={personalInfo.lastName}
                onChange={(e) => setPersonalInfo({...personalInfo, lastName: e.target.value})}
                sx={{ mb: 2 }}
              />
              
              <TextField
                fullWidth
                label="Email"
                value={personalInfo.email}
                onChange={(e) => setPersonalInfo({...personalInfo, email: e.target.value})}
                sx={{ mb: 2 }}
              />
              
              <TextField
                fullWidth
                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                value={personalInfo.phone}
                onChange={(e) => setPersonalInfo({...personalInfo, phone: e.target.value})}
                sx={{ mb: 2 }}
              />
              
              <TextField
                fullWidth
                label="Telegram"
                value={personalInfo.telegramUsername}
                onChange={(e) => setPersonalInfo({...personalInfo, telegramUsername: e.target.value})}
                sx={{ mb: 2 }}
              />
              
              <Button 
                variant="contained" 
                startIcon={<Save />}
                onClick={handleSavePersonalInfo}
                sx={{ mt: 2 }}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </Button>
            </Paper>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                –ê–∫–∫–∞—É–Ω—Ç
              </Typography>
              
              <Typography variant="body2" sx={{ mb: 1 }}>
                <strong>–†–æ–ª—å:</strong> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
              </Typography>
              
              <Typography variant="body2" sx={{ mb: 1 }}>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–µ–Ω
              </Typography>
              
              <Typography variant="body2" sx={{ mb: 1 }}>
                <strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> 01.01.2025
              </Typography>
              
              <Typography variant="body2" sx={{ mb: 2 }}>
                <strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</strong> {new Date().toLocaleString('ru-RU')}
              </Typography>
              
              <Button 
                variant="outlined" 
                color="error" 
                fullWidth
                onClick={handleLogout}
              >
                –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
              </Button>
            </Paper>
          </Grid>
        </Grid>
      )}

      {activeTab === 1 && (
        <Grid container spacing={3}>
          <Grid item xs={12} md={8}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
              </Typography>
              
              <TextField
                fullWidth
                label="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                type={passwordChange.showCurrentPassword ? "text" : "password"}
                value={passwordChange.currentPassword}
                onChange={(e) => setPasswordChange({...passwordChange, currentPassword: e.target.value})}
                sx={{ mb: 2 }}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setPasswordChange({...passwordChange, showCurrentPassword: !passwordChange.showCurrentPassword})}
                      >
                        {passwordChange.showCurrentPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  )
                }}
              />
              
              <TextField
                fullWidth
                label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                type={passwordChange.showNewPassword ? "text" : "password"}
                value={passwordChange.newPassword}
                onChange={(e) => setPasswordChange({...passwordChange, newPassword: e.target.value})}
                sx={{ mb: 2 }}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setPasswordChange({...passwordChange, showNewPassword: !passwordChange.showNewPassword})}
                      >
                        {passwordChange.showNewPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  )
                }}
              />
              
              <TextField
                fullWidth
                label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                type={passwordChange.showConfirmPassword ? "text" : "password"}
                value={passwordChange.confirmPassword}
                onChange={(e) => setPasswordChange({...passwordChange, confirmPassword: e.target.value})}
                sx={{ mb: 2 }}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setPasswordChange({...passwordChange, showConfirmPassword: !passwordChange.showConfirmPassword})}
                      >
                        {passwordChange.showConfirmPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  )
                }}
              />
              
              <Button 
                variant="contained" 
                startIcon={<Save />}
                onClick={handleChangePassword}
                sx={{ mt: 2 }}
              >
                –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
              </Button>
            </Paper>
          </Grid>
        </Grid>
      )}

      {activeTab === 2 && (
        <Grid container spacing={3}>
          <Grid item xs={12} md={8}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </Typography>
              
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>–¢–µ–º–∞</InputLabel>
                <Select 
                  value={preferences.theme}
                  onChange={(e) => setPreferences({...preferences, theme: e.target.value})}
                >
                  <MenuItem value="light">–°–≤–µ—Ç–ª–∞—è</MenuItem>
                  <MenuItem value="dark">–¢–µ–º–Ω–∞—è</MenuItem>
                </Select>
              </FormControl>
              
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>–Ø–∑—ã–∫</InputLabel>
                <Select 
                  value={preferences.language}
                  onChange={(e) => setPreferences({...preferences, language: e.target.value})}
                >
                  <MenuItem value="ru">–†—É—Å—Å–∫–∏–π</MenuItem>
                  <MenuItem value="en">English</MenuItem>
                </Select>
              </FormControl>
              
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</InputLabel>
                <Select 
                  value={preferences.timezone}
                  onChange={(e) => setPreferences({...preferences, timezone: e.target.value})}
                >
                  <MenuItem value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (MSK)</MenuItem>
                  <MenuItem value="Asia/Yekaterinburg">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (YEKT)</MenuItem>
                  <MenuItem value="Asia/Novosibirsk">–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (NOVT)</MenuItem>
                </Select>
              </FormControl>
              
              <FormControlLabel
                control={
                  <Switch 
                    checked={preferences.notifications.email}
                    onChange={(e) => setPreferences({
                      ...preferences, 
                      notifications: {...preferences.notifications, email: e.target.checked}
                    })}
                  />
                }
                label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ"
                sx={{ mb: 1 }}
              />
              
              <FormControlLabel
                control={
                  <Switch 
                    checked={preferences.notifications.telegram}
                    onChange={(e) => setPreferences({
                      ...preferences, 
                      notifications: {...preferences.notifications, telegram: e.target.checked}
                    })}
                  />
                }
                label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"
                sx={{ mb: 1 }}
              />
              
              <FormControlLabel
                control={
                  <Switch 
                    checked={preferences.notifications.push}
                    onChange={(e) => setPreferences({
                      ...preferences, 
                      notifications: {...preferences.notifications, push: e.target.checked}
                    })}
                  />
                }
                label="Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                sx={{ mb: 2 }}
              />
              
              <Button 
                variant="contained" 
                startIcon={<Save />}
                onClick={handleSavePreferences}
                sx={{ mt: 2 }}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </Paper>
          </Grid>
        </Grid>
      )}

      {activeTab === 3 && (
        <Grid container spacing={3}>
          <Grid item xs={12} md={8}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
              </Typography>
              
              <Typography variant="body1" sx={{ mb: 2 }}>
                –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
              </Typography>
              
              <Button 
                variant="outlined" 
                startIcon={<Refresh />}
                sx={{ mb: 2 }}
              >
                –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏ API
              </Button>
              
              <Button 
                variant="outlined" 
                color="error"
                sx={{ ml: 2 }}
              >
                –û—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏
              </Button>
              
              <Box sx={{ mt: 3 }}>
                <Typography variant="h6" sx={{ mb: 2 }}>
                  –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                </Typography>
                
                <Typography variant="body2" sx={{ mb: 2 }}>
                  –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.
                </Typography>
                
                <Button variant="outlined">
                  –í–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                </Button>
              </Box>
            </Paper>
          </Grid>
        </Grid>
      )}

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
      >
        <Alert 
          onClose={handleSnackbarClose} 
          severity={snackbarSeverity}
          sx={{ width: '100%' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default AdminProfilePage;