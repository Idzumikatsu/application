package com.crm.system.service;

import com.crm.system.model.LessonPackage;
import com.crm.system.model.Student;
import com.crm.system.model.TelegramMessage;
import com.crm.system.repository.LessonPackageRepository;
import com.crm.system.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.logging.Logger;

@Service
public class PackageNotificationService {

    private static final Logger logger = Logger.getLogger(PackageNotificationService.class.getName());

    @Autowired
    private LessonPackageRepository lessonPackageRepository;

    @Autowired
    private StudentRepository studentRepository;

    @Autowired
    private TelegramNotificationService telegramNotificationService;

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è (–º–µ–Ω–µ–µ 5 —É—Ä–æ–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å)
     * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
     */
    @Scheduled(cron = "0 0 9 * * *") // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    public void checkPackagesEndingSoon() {
        logger.info("Checking for packages ending soon...");
        
        List<LessonPackage> packages = lessonPackageRepository.findPackagesWithLowRemainingLessons(5);
        
        for (LessonPackage lessonPackage : packages) {
            try {
                sendPackageEndingSoonNotification(lessonPackage);
            } catch (Exception e) {
                logger.severe("Failed to send notification for package " + lessonPackage.getId() + ": " + e.getMessage());
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã (–∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)
     */
    @Scheduled(cron = "0 0 10 * * *") // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    public void checkExpiredPackages() {
        logger.info("Checking for expired packages...");
        
        List<LessonPackage> packages = lessonPackageRepository.findExpiredPackages(LocalDateTime.now());
        
        for (LessonPackage lessonPackage : packages) {
            try {
                sendPackageExpiredNotification(lessonPackage);
            } catch (Exception e) {
                logger.severe("Failed to send expired notification for package " + lessonPackage.getId() + ": " + e.getMessage());
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–∞–∫–µ—Ç —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
     */
    private void sendPackageEndingSoonNotification(LessonPackage lessonPackage) {
        Student student = studentRepository.findById(lessonPackage.getStudentId())
                .orElseThrow(() -> new RuntimeException("Student not found: " + lessonPackage.getStudentId()));

        if (student.getTelegramChatId() != null) {
            String message = String.format(
                "üìö –í–∞—à –ø–∞–∫–µ—Ç —É—Ä–æ–∫–æ–≤ \"%s\" —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!\n" +
                "–û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: %d –∏–∑ %d\n" +
                "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ %s\n\n" +
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ!",
                lessonPackage.getName(),
                lessonPackage.getRemainingLessons(),
                lessonPackage.getTotalLessons(),
                lessonPackage.getExpirationDate().toLocalDate()
            );

            telegramNotificationService.sendNotification(
                student.getTelegramChatId(),
                student.getId(),
                TelegramMessage.RecipientType.STUDENT,
                message,
                TelegramMessage.MessageType.PACKAGE_ENDING_SOON
            );
        }

        // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        String managerMessage = String.format(
            "‚ö†Ô∏è –ü–∞–∫–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ %s —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!\n" +
            "–°—Ç—É–¥–µ–Ω—Ç: %s %s\n" +
            "–ü–∞–∫–µ—Ç: %s\n" +
            "–û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: %d –∏–∑ %d\n" +
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ %s",
            student.getFullName(),
            student.getFirstName(),
            student.getLastName(),
            lessonPackage.getName(),
            lessonPackage.getRemainingLessons(),
            lessonPackage.getTotalLessons(),
            lessonPackage.getExpirationDate().toLocalDate()
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        telegramNotificationService.sendNotificationToManagers(
            managerMessage,
            TelegramMessage.MessageType.PACKAGE_ENDING_SOON
        );
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º –ø–∞–∫–µ—Ç–µ
     */
    private void sendPackageExpiredNotification(LessonPackage lessonPackage) {
        Student student = studentRepository.findById(lessonPackage.getStudentId())
                .orElseThrow(() -> new RuntimeException("Student not found: " + lessonPackage.getStudentId()));

        if (student.getTelegramChatId() != null) {
            String message = String.format(
                "‚è∞ –í–∞—à –ø–∞–∫–µ—Ç —É—Ä–æ–∫–æ–≤ \"%s\" –∏—Å—Ç–µ–∫!\n" +
                "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: %s\n" +
                "–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: %d\n\n" +
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.",
                lessonPackage.getName(),
                lessonPackage.getExpirationDate().toLocalDate(),
                lessonPackage.getRemainingLessons()
            );

            telegramNotificationService.sendNotification(
                student.getTelegramChatId(),
                student.getId(),
                TelegramMessage.RecipientType.STUDENT,
                message,
                TelegramMessage.MessageType.PACKAGE_EXPIRED
            );
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        String managerMessage = String.format(
            "‚ùå –ü–∞–∫–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ %s –∏—Å—Ç–µ–∫!\n" +
            "–°—Ç—É–¥–µ–Ω—Ç: %s %s\n" +
            "–ü–∞–∫–µ—Ç: %s\n" +
            "–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: %d\n" +
            "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: %s",
            student.getFullName(),
            student.getFirstName(),
            student.getLastName(),
            lessonPackage.getName(),
            lessonPackage.getRemainingLessons(),
            lessonPackage.getExpirationDate().toLocalDate()
        );

        telegramNotificationService.sendNotificationToManagers(
            managerMessage,
            TelegramMessage.MessageType.PACKAGE_EXPIRED
        );
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞–∫–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    public void checkAndNotifyForPackage(LessonPackage lessonPackage) {
        if (lessonPackage.getRemainingLessons() <= 5 && lessonPackage.getRemainingLessons() > 0) {
            sendPackageEndingSoonNotification(lessonPackage);
        }
        
        if (lessonPackage.getExpirationDate().isBefore(LocalDateTime.now()) && lessonPackage.getRemainingLessons() > 0) {
            sendPackageExpiredNotification(lessonPackage);
        }
    }
}