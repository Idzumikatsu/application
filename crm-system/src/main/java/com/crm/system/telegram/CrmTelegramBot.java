package com.crm.system.telegram;

import com.crm.system.model.TelegramMessage;
import com.crm.system.model.TelegramMessage.RecipientType;
import com.crm.system.model.TelegramMessage.MessageType;
import com.crm.system.model.TelegramMessage.DeliveryStatus;
import com.crm.system.model.Lesson;
import com.crm.system.model.GroupLesson;
import com.crm.system.service.TelegramNotificationService;
import com.crm.system.service.UserService;
import com.crm.system.service.StudentService;
import com.crm.system.service.LessonService;
import com.crm.system.service.GroupLessonService;
import com.crm.system.service.GroupLessonRegistrationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.logging.Logger;

@Component
public class CrmTelegramBot extends TelegramLongPollingBot {

    private static final Logger logger = Logger.getLogger(CrmTelegramBot.class.getName());

    @Autowired
    private TelegramNotificationService telegramNotificationService;

    @Autowired
    private UserService userService;

    @Autowired
    private StudentService studentService;

    @Autowired
    private LessonService lessonService;

    @Autowired
    private GroupLessonService groupLessonService;

    @Autowired
    private GroupLessonRegistrationService groupLessonRegistrationService;

    @Value("${telegram.bot.token}")
    private String botToken;
    
    @Value("${telegram.bot.username:crm_english_school_bot}")
    private String botUsername;

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleMessage(update.getMessage());
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
            else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update.getCallbackQuery().getData());
            }
        } catch (Exception e) {
            logger.severe("Error processing update: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();
        User telegramUser = message.getFrom();

        logger.info("Received message from chatId: " + chatId + ", text: " + text);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        TelegramMessage telegramMessage = new TelegramMessage(chatId, null, RecipientType.STUDENT, text);
        telegramMessage.setMessageType(MessageType.TEXT);
        telegramMessage.setDeliveryStatus(DeliveryStatus.PENDING);
        telegramMessage.setSentAt(LocalDateTime.now());

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (text.startsWith("/")) {
            handleCommand(chatId, text, telegramUser);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            handleTextMessage(chatId, text, telegramUser);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        telegramNotificationService.saveTelegramMessage(telegramMessage);
    }

    private void handleCommand(Long chatId, String command, User telegramUser) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        if (command.startsWith("/confirm_attendance_")) {
            handleAttendanceConfirmationCommand(chatId, command);
        } else {
            switch (command) {
                case "/start":
                    handleStartCommand(chatId, telegramUser);
                    break;
                case "/register":
                    handleRegisterCommand(chatId, telegramUser);
                    break;
                case "/lessons":
                    sendLessonsSchedule(chatId, telegramUser);
                    break;
                case "/groupllessons":
                    sendGroupLessonsSchedule(chatId, telegramUser);
                    break;
                case "/help":
                    sendHelpMessage(chatId, telegramUser);
                    break;
                case "/feedback":
                    sendFeedbackRequest(chatId, telegramUser);
                    break;
                default:
                    sendUnknownCommandMessage(chatId, command);
                    break;
            }
        }
    }

    private void handleTextMessage(Long chatId, String text, User telegramUser) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (isValidEmail(text)) {
            handleEmailRegistration(chatId, text, telegramUser);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sendTextMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –Ø –ø–µ—Ä–µ–¥–∞–ª –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
        }
    }
    
    private boolean isValidEmail(String text) {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
        return text != null && text.contains("@") && text.contains(".");
    }
    
    private void handleEmailRegistration(Long chatId, String email, User telegramUser) {
        try {
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            java.util.Optional<com.crm.system.model.User> userOptional = userService.findByEmail(email);
            if (userOptional.isPresent()) {
                com.crm.system.model.User user = userOptional.get();
                // –û–±–Ω–æ–≤–ª—è–µ–º chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.setTelegramChatId(chatId);
                userService.saveUser(user);
                
                String successText = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" +
                        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n" +
                        "‚Ä¢ –í–∞—à–∏—Ö —É—Ä–æ–∫–∞—Ö\n" +
                        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ –∑–∞–Ω—è—Ç–∏—è—Ö\n" +
                        "‚Ä¢ –û—Ç–º–µ–Ω–∞—Ö —É—Ä–æ–∫–æ–≤\n" +
                        "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /lessons –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.";
                
                sendTextMessage(chatId, successText);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                sendRegistrationNotificationToManager(user, telegramUser);
                
            } else {
                // –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ email
                java.util.Optional<com.crm.system.model.Student> studentOptional = studentService.findByEmail(email);
                if (studentOptional.isPresent()) {
                    com.crm.system.model.Student student = studentOptional.get();
                    // –û–±–Ω–æ–≤–ª—è–µ–º chatId —Å—Ç—É–¥–µ–Ω—Ç–∞
                    student.setTelegramChatId(chatId);
                    studentService.saveStudent(student);
                    
                    String successText = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" +
                            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n" +
                            "‚Ä¢ –í–∞—à–∏—Ö —É—Ä–æ–∫–∞—Ö\n" +
                            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ –∑–∞–Ω—è—Ç–∏—è—Ö\n" +
                            "‚Ä¢ –û—Ç–º–µ–Ω–∞—Ö —É—Ä–æ–∫–æ–≤\n" +
                            "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö\n\n" +
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /lessons –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.";
                    
                    sendTextMessage(chatId, successText);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                    sendRegistrationNotificationToManager(student, telegramUser);
                    
                } else {
                    String errorText = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email " + email + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n" +
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.";
                    sendTextMessage(chatId, errorText);
                }
            }
        } catch (Exception e) {
            logger.severe("Error during email registration: " + e.getMessage());
            String errorText = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.";
            sendTextMessage(chatId, errorText);
        }
    }
    
    private void sendRegistrationNotificationToManager(com.crm.system.model.User user, User telegramUser) {
        String notificationText = "üìã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ Telegram –±–æ—Ç–µ:\n\n" +
                "–ò–º—è: " + user.getFirstName() + " " + user.getLastName() + "\n" +
                "Email: " + user.getEmail() + "\n" +
                "Telegram: @" + (telegramUser.getUserName() != null ? telegramUser.getUserName() : "–Ω–µ —É–∫–∞–∑–∞–Ω") + "\n" +
                "Chat ID: " + user.getTelegramChatId();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        telegramNotificationService.notifyManagersAboutRegistration(notificationText);
    }
    
    private void sendRegistrationNotificationToManager(com.crm.system.model.Student student, User telegramUser) {
        String notificationText = "üìã –ù–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ Telegram –±–æ—Ç–µ:\n\n" +
                "–ò–º—è: " + student.getFirstName() + " " + student.getLastName() + "\n" +
                "Email: " + student.getEmail() + "\n" +
                "Telegram: @" + (telegramUser.getUserName() != null ? telegramUser.getUserName() : "–Ω–µ —É–∫–∞–∑–∞–Ω") + "\n" +
                "Chat ID: " + student.getTelegramChatId();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        telegramNotificationService.notifyManagersAboutRegistration(notificationText);
    }

    private void handleCallbackQuery(String callbackData) {
        logger.info("Received callback query: " + callbackData);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        if (callbackData.startsWith("confirm_attendance_")) {
            handleAttendanceConfirmation(callbackData);
        } else {
            // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã callback-–∑–∞–ø—Ä–æ—Å–æ–≤
            telegramNotificationService.handleCallbackQuery(callbackData);
        }
    }
    
    private void handleAttendanceConfirmation(String callbackData) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—Ä–æ–∫–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
            String[] parts = callbackData.split("_");
            if (parts.length >= 3) {
                Long lessonId = Long.parseLong(parts[2]);
                Long chatId = Long.parseLong(parts[3]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
                boolean confirmed = lessonService.confirmAttendance(lessonId);
                
                if (confirmed) {
                    sendTextMessage(chatId, "‚úÖ –í–∞—à–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!");
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                    java.util.Optional<com.crm.system.model.Lesson> lessonOptional = lessonService.findById(lessonId);
                    if (lessonOptional.isPresent()) {
                        com.crm.system.model.Lesson lesson = lessonOptional.get();
                        String notificationText = "‚úÖ –°—Ç—É–¥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–∫–µ:\n\n" +
                                               "üìö –£—Ä–æ–∫: " + lesson.getSubject() + "\n" +
                                               "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: " + lesson.getStudent().getFirstName() + " " + lesson.getStudent().getLastName() + "\n" +
                                               "‚è∞ –í—Ä–µ–º—è: " + lesson.getScheduledTime() + "\n" +
                                               "üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: " + lesson.getPlatform();
                        
                        telegramNotificationService.notifyManagersAboutAttendanceConfirmation(notificationText);
                    }
                } else {
                    sendTextMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                }
            }
        } catch (Exception e) {
            logger.severe("Error handling attendance confirmation: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleStartCommand(Long chatId, User telegramUser) {
        String welcomeText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM-—Å–∏—Å—Ç–µ–º—É –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üëã\n\n" +
                "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞—à–∏—Ö —É—Ä–æ–∫–∞—Ö, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n" +
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n" +
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
                "/lessons - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤\n" +
                "/groupllessons - –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤\n" +
                "/help - –ü–æ–º–æ—â—å\n" +
                "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å";

        sendTextMessage(chatId, welcomeText);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        checkUserRegistration(chatId, telegramUser);
    }
    
    private void handleRegisterCommand(Long chatId, User telegramUser) {
        String registrationText = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üìã\n\n" +
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —à–∫–æ–ª–µ.\n\n" +
                "–§–æ—Ä–º–∞—Ç: email@example.com\n\n" +
                "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö —É—Ä–æ–∫–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.";

        sendTextMessage(chatId, registrationText);
    }
    
    private void checkUserRegistration(Long chatId, User telegramUser) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º chatId –≤ —Å–∏—Å—Ç–µ–º–µ
        boolean isUserRegistered = userService.isUserRegisteredWithTelegram(chatId);
        boolean isStudentRegistered = studentService.isStudentRegisteredWithTelegram(chatId);
        
        if (!isUserRegistered && !isStudentRegistered) {
            String registrationPrompt = "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n" +
                    "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.";
            sendTextMessage(chatId, registrationPrompt);
        } else {
            String welcomeBackText = "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n" +
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö —É—Ä–æ–∫–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.";
            sendTextMessage(chatId, welcomeBackText);
        }
    }

    private void sendLessonsSchedule(Long chatId, User telegramUser) {
        String scheduleText = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤:\n\n" +
                "–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n\n" +
                "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n" +
                "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /groupllessons.";

        sendTextMessage(chatId, scheduleText);
    }

    private void sendGroupLessonsSchedule(Long chatId, User telegramUser) {
        String scheduleText = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤:\n\n" +
                "–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤.\n\n" +
                "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö.";

        sendTextMessage(chatId, scheduleText);
    }

    private void sendHelpMessage(Long chatId, User telegramUser) {
        String helpText = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n" +
                "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" +
                "/lessons - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤\n" +
                "/groupllessons - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤\n" +
                "/help - –ü–æ–º–æ—â—å\n" +
                "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n" +
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö –≤ —á–∞—Ç, –∏ —è –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.";

        sendTextMessage(chatId, helpText);
    }

    private void sendFeedbackRequest(Long chatId, User telegramUser) {
        String feedbackText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ –ø—Ä–æ—à–µ–¥—à–∏—Ö —É—Ä–æ–∫–∞—Ö.\n\n" +
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.";

        sendTextMessage(chatId, feedbackText);
    }

    private void sendUnknownCommandMessage(Long chatId, String command) {
        String unknownText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command + "\n\n" +
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n" +
                "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" +
                "/lessons - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤\n" +
                "/groupllessons - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤\n" +
                "/help - –ü–æ–º–æ—â—å\n" +
                "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å";

        sendTextMessage(chatId, unknownText);
    }

    public void sendTextMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
            logger.info("Successfully sent message to chatId: " + chatId);
        } catch (TelegramApiException e) {
            logger.severe("Failed to send message to chatId: " + chatId + ". Error: " + e.getMessage());
            telegramNotificationService.handleSendMessageFailure(chatId, e.getMessage());
        }
    }

    public void sendLessonNotification(Long chatId, String lessonInfo, MessageType messageType) {
        String notificationText = "";

        switch (messageType) {
            case LESSON_REMINDER:
                notificationText = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –£ –≤–∞—Å —É—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è:\n\n" + lessonInfo;
                break;
            case LESSON_CANCELLED:
                notificationText = "–í–∞—à —É—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω:\n\n" + lessonInfo;
                break;
            case LESSON_CONFIRMATION:
                notificationText = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Ä–æ–∫–∞:\n\n" + lessonInfo;
                break;
            case GROUP_LESSON_REMINDER:
                notificationText = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –£ –≤–∞—Å –≥—Ä—É–ø–ø–æ–≤–æ–π —É—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è:\n\n" + lessonInfo;
                break;
            case GROUP_LESSON_CANCELLED:
                notificationText = "–í–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —É—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω:\n\n" + lessonInfo;
                break;
            case SYSTEM_NOTIFICATION:
                notificationText = "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n" + lessonInfo;
                break;
            case FEEDBACK_REQUEST:
                notificationText = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:\n\n" + lessonInfo;
                break;
            default:
                notificationText = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n" + lessonInfo;
                break;
        }

        sendTextMessage(chatId, notificationText);
    }

    public void sendSystemNotification(Long chatId, String notificationText) {
        sendTextMessage(chatId, notificationText);
    }

    public void sendFeedbackRequest(Long chatId, String feedbackInfo) {
        String messageText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:\n\n" + feedbackInfo;
        sendTextMessage(chatId, messageText);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    public void sendNotificationToStudent(Long chatId, Long studentId, String messageText) {
        telegramNotificationService.sendNotification(
                chatId, studentId, RecipientType.STUDENT, messageText, MessageType.TEXT);
    }

    public void sendNotificationToTeacher(Long chatId, Long teacherId, String messageText) {
        telegramNotificationService.sendNotification(
                chatId, teacherId, RecipientType.TEACHER, messageText, MessageType.TEXT);
    }
    
        // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ —É—Ä–æ–∫–∞—Ö
        public void sendLessonReminders() {
            try {
                LocalDate today = LocalDate.now();
                LocalDate tomorrow = today.plusDays(1);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —É—Ä–æ–∫–∞—Ö
                sendIndividualLessonReminders(today, tomorrow);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö
                sendGroupLessonReminders(today, tomorrow);
                
            } catch (Exception e) {
                logger.severe("Error sending lesson reminders: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        private void sendIndividualLessonReminders(LocalDate today, LocalDate tomorrow) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
                List<com.crm.system.model.Lesson> todayLessons = lessonService.findByDateRange(today, today);
                List<com.crm.system.model.Lesson> tomorrowLessons = lessonService.findByDateRange(tomorrow, tomorrow);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —É—Ä–æ–∫–∞—Ö
                for (com.crm.system.model.Lesson lesson : todayLessons) {
                    if (lesson.isScheduled() && lesson.getStudent() != null && lesson.getStudent().getTelegramChatId() != null) {
                        String reminderText = formatIndividualLessonReminder(lesson, "—Å–µ–≥–æ–¥–Ω—è");
                        sendTextMessage(lesson.getStudent().getTelegramChatId(), reminderText);
                    }
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö —É—Ä–æ–∫–∞—Ö
                for (com.crm.system.model.Lesson lesson : tomorrowLessons) {
                    if (lesson.isScheduled() && lesson.getStudent() != null && lesson.getStudent().getTelegramChatId() != null) {
                        String reminderText = formatIndividualLessonReminder(lesson, "–∑–∞–≤—Ç—Ä–∞");
                        sendTextMessage(lesson.getStudent().getTelegramChatId(), reminderText);
                    }
                }
                
            } catch (Exception e) {
                logger.severe("Error sending individual lesson reminders: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        private void sendGroupLessonReminders(LocalDate today, LocalDate tomorrow) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —É—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
                List<com.crm.system.model.GroupLesson> todayGroupLessons = groupLessonService.findByDateRangeAndStatuses(
                    today, today, List.of(com.crm.system.model.GroupLesson.GroupLessonStatus.SCHEDULED,
                                        com.crm.system.model.GroupLesson.GroupLessonStatus.CONFIRMED));
                
                List<com.crm.system.model.GroupLesson> tomorrowGroupLessons = groupLessonService.findByDateRangeAndStatuses(
                    tomorrow, tomorrow, List.of(com.crm.system.model.GroupLesson.GroupLessonStatus.SCHEDULED,
                                               com.crm.system.model.GroupLesson.GroupLessonStatus.CONFIRMED));
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö
                for (com.crm.system.model.GroupLesson groupLesson : todayGroupLessons) {
                    sendGroupLessonReminderToParticipants(groupLesson, "—Å–µ–≥–æ–¥–Ω—è");
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö
                for (com.crm.system.model.GroupLesson groupLesson : tomorrowGroupLessons) {
                    sendGroupLessonReminderToParticipants(groupLesson, "–∑–∞–≤—Ç—Ä–∞");
                }
                
            } catch (Exception e) {
                logger.severe("Error sending group lesson reminders: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        private void sendGroupLessonReminderToParticipants(com.crm.system.model.GroupLesson groupLesson, String day) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
                List<com.crm.system.model.GroupLessonRegistration> registrations = groupLessonRegistrationService.findByGroupLessonId(groupLesson.getId());
                List<com.crm.system.model.Student> participants = registrations.stream()
                        .map(com.crm.system.model.GroupLessonRegistration::getStudent)
                        .collect(java.util.stream.Collectors.toList());
                
                for (com.crm.system.model.Student student : participants) {
                    if (student.getTelegramChatId() != null) {
                        String reminderText = formatGroupLessonReminder(groupLesson, student, day);
                        sendTextMessage(student.getTelegramChatId(), reminderText);
                    }
                }
                
            } catch (Exception e) {
                logger.severe("Error sending group lesson reminder to participants: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        private String formatIndividualLessonReminder(com.crm.system.model.Lesson lesson, String day) {
            return "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± —É—Ä–æ–∫–µ " + day + ":\n\n" +
                   "üìö –£—Ä–æ–∫: " + lesson.getSubject() + "\n" +
                   "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + lesson.getTeacher().getFirstName() + " " + lesson.getTeacher().getLastName() + "\n" +
                   "‚è∞ –í—Ä–µ–º—è: " + lesson.getScheduledTime() + "\n" +
                   "üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: " + lesson.getPlatform() + "\n\n" +
                   "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —É—Ä–æ–∫—É!";
        }
        
        private String formatGroupLessonReminder(com.crm.system.model.GroupLesson groupLesson, com.crm.system.model.Student student, String day) {
            return "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥—Ä—É–ø–ø–æ–≤–æ–º —É—Ä–æ–∫–µ " + day + ":\n\n" +
                   "üìö –¢–µ–º–∞: " + groupLesson.getLessonTopic() + "\n" +
                   "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + groupLesson.getTeacher().getFirstName() + " " + groupLesson.getTeacher().getLastName() + "\n" +
                   "‚è∞ –í—Ä–µ–º—è: " + groupLesson.getScheduledTime() + "\n" +
                   "üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: " + groupLesson.getPlatform() + "\n" +
                   "üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: " + groupLesson.getCurrentParticipants() + "/" + groupLesson.getMaxParticipants() + "\n\n" +
                   "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —É—Ä–æ–∫—É!";
        }
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–∞—Ö (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
        public void scheduleLessonReminders() {
            logger.info("Starting scheduled lesson reminders...");
            sendLessonReminders();
            logger.info("Scheduled lesson reminders completed.");
        }
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Ä–æ–∫–æ–≤
        public void sendAttendanceConfirmationRequests() {
            try {
                LocalDate today = LocalDate.now();
                LocalDateTime now = LocalDateTime.now();
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                List<Lesson> completedLessons = lessonService.findCompletedLessonsForAttendanceConfirmation(today, now);
                
                for (Lesson lesson : completedLessons) {
                    if (lesson.getStudent() != null && lesson.getStudent().getTelegramChatId() != null) {
                        sendAttendanceConfirmationRequest(lesson);
                    }
                }
                
            } catch (Exception e) {
                logger.severe("Error sending attendance confirmation requests: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        private void sendAttendanceConfirmationRequest(Lesson lesson) {
            try {
                Long chatId = lesson.getStudent().getTelegramChatId();
                String messageText = "üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ —É—Ä–æ–∫–µ\n\n" +
                                  "üìö –£—Ä–æ–∫: " + lesson.getSubject() + "\n" +
                                  "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + lesson.getTeacher().getFirstName() + " " + lesson.getTeacher().getLastName() + "\n" +
                                  "‚è∞ –í—Ä–µ–º—è: " + lesson.getScheduledTime() + "\n\n" +
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–∫–µ:";
                
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sendTextMessage(chatId, messageText);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                String instructions = "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n" +
                                   "/confirm_attendance_" + lesson.getId();
                
                sendTextMessage(chatId, instructions);
                
            } catch (Exception e) {
                logger.severe("Error sending attendance confirmation request: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        private void handleAttendanceConfirmationCommand(Long chatId, String command) {
            try {
                if (command.startsWith("/confirm_attendance_")) {
                    String[] parts = command.split("_");
                    if (parts.length >= 3) {
                        Long lessonId = Long.parseLong(parts[2]);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
                        boolean confirmed = lessonService.confirmAttendance(lessonId);
                        
                        if (confirmed) {
                            sendTextMessage(chatId, "‚úÖ –í–∞—à–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!");
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                            java.util.Optional<Lesson> lessonOptional = lessonService.findById(lessonId);
                            if (lessonOptional.isPresent()) {
                                Lesson lesson = lessonOptional.get();
                                String notificationText = "‚úÖ –°—Ç—É–¥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–∫–µ:\n\n" +
                                                       "üìö –£—Ä–æ–∫: " + lesson.getSubject() + "\n" +
                                                       "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: " + lesson.getStudent().getFirstName() + " " + lesson.getStudent().getLastName() + "\n" +
                                                       "‚è∞ –í—Ä–µ–º—è: " + lesson.getScheduledTime() + "\n" +
                                                       "üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: " + lesson.getPlatform();
                                
                                telegramNotificationService.notifyManagersAboutAttendanceConfirmation(notificationText);
                            }
                        } else {
                            sendTextMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                        }
                    }
                }
            } catch (Exception e) {
                logger.severe("Error handling attendance confirmation command: " + e.getMessage());
                e.printStackTrace();
                sendTextMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
            }
        }

    public void sendNotificationToManager(Long chatId, Long managerId, String messageText) {
        telegramNotificationService.sendNotification(
                chatId, managerId, RecipientType.MANAGER, messageText, MessageType.TEXT);
    }

    public void sendNotificationToAdmin(Long chatId, Long adminId, String messageText) {
        telegramNotificationService.sendNotification(
                chatId, adminId, RecipientType.ADMIN, messageText, MessageType.TEXT);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    public void handleBotError(Exception e) {
        logger.severe("Telegram bot error: " + e.getMessage());
        e.printStackTrace();
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    public void testConnection() {
        logger.info("Testing Telegram bot connection...");
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
    }
}