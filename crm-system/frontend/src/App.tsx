import React, { useEffect } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { RootState, AppDispatch } from './store';
import { loginSuccess, logout } from './store/authSlice';
import AuthService from './services/authService';
import LoginPage from './pages/LoginPage';
import DashboardPage from './pages/DashboardPage';
import TeacherPage from './pages/TeacherPage';
import ManagerPage from './pages/ManagerPage';
import StudentPage from './pages/StudentPage';
import UnauthorizedPage from './pages/UnauthorizedPage';
import AuthErrorHandler from './components/AuthErrorHandler';
import LessonStatusAutomation from './components/LessonStatus/LessonStatusAutomation';
import NotificationPanel from './components/NotificationPanel';
import './App.css';

const theme = createTheme({
  palette: {
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#dc004e',
    },
    background: {
      default: '#f5f5f5',
    },
  },
  typography: {
    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
    h4: {
      fontWeight: 600,
    },
    h5: {
      fontWeight: 600,
    },
    h6: {
      fontWeight: 600,
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          borderRadius: 8,
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
        },
      },
    },
  },
});

function App() {
  const { isAuthenticated, user } = useSelector((state: RootState) => state.auth);
  const dispatch: AppDispatch = useDispatch();

  useEffect(() => {
    const token = AuthService.getToken();
    console.log('üîÑ App initialization - token in localStorage:', token ? 'PRESENT' : 'NOT FOUND');

    if (token) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
      if (AuthService.isAuthenticated()) {
        console.log('üîÑ Token is valid, attempting to restore session...');
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
          AuthService.getCurrentUser()
            .then((userData) => {
              console.log('‚úÖ Session restored successfully:', userData);
              dispatch(loginSuccess({ user: userData, token }));
            })
            .catch((error) => {
              console.error('‚ùå Session restoration failed:', error);
              // –û—á–∏—â–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
              AuthService.logout();
              dispatch(logout());
            });
        } catch (error) {
          console.error('‚ùå Unexpected error during session restoration:', error);
          AuthService.logout();
          dispatch(logout());
        }
      } else {
        console.log('‚ÑπÔ∏è Token is expired or invalid, clearing session');
        // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        AuthService.logout();
        dispatch(logout());
      }
    } else {
      console.log('‚ÑπÔ∏è No token found, user not authenticated');
    }
  }, [dispatch]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  useEffect(() => {
    const checkTokenRefresh = async () => {
      if (isAuthenticated && AuthService.shouldRefreshToken()) {
        try {
          const newToken = await AuthService.refreshToken();
          AuthService.setToken(newToken);
          dispatch(loginSuccess({ user: user!, token: newToken }));
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', error);
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
          dispatch(logout());
          AuthService.logout();
        }
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(checkTokenRefresh, 30000);
    return () => clearInterval(interval);
  }, [isAuthenticated, user, dispatch]);

  const renderProtectedRoute = (element: React.ReactElement) => {
    return isAuthenticated ? element : <Navigate to="/login" replace />;
  };

  const renderRoleBasedRoute = (allowedRoles: string[], element: React.ReactElement) => {
    if (!isAuthenticated) {
      return <Navigate to="/login" replace />;
    }
    
    if (user && allowedRoles.includes(user.role)) {
      return element;
    }
    
    // –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ dashboard
    return <Navigate to="/dashboard" replace />;
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <div className="app-container">
        <Routes>
          <Route path="/login" element={<LoginPage />} />
          <Route 
            path="/dashboard" 
            element={renderProtectedRoute(<DashboardPage />)} 
          />
          
          {/* Teacher routes */}
          <Route 
            path="/teacher/*" 
            element={renderRoleBasedRoute(['TEACHER'], <TeacherPage />)} 
          />
          
          {/* Manager routes */}
          <Route 
            path="/manager/*" 
            element={renderRoleBasedRoute(['MANAGER', 'ADMIN'], <ManagerPage />)} 
          />
          
          {/* Student routes */}
          <Route 
            path="/student/*" 
            element={renderRoleBasedRoute(['STUDENT'], <StudentPage />)} 
          />
          
          {/* Admin routes */}
          <Route
            path="/admin/*"
            element={renderRoleBasedRoute(['ADMIN'], <ManagerPage />)}
          />
          
          {/* Unauthorized route */}
          <Route
            path="/unauthorized"
            element={<UnauthorizedPage />}
          />
          
          {/* Default route */}
          <Route
            path="/"
            element={isAuthenticated ? <Navigate to="/dashboard" replace /> : <Navigate to="/login" replace />}
          />
        </Routes>
        
        {/* Global authentication error handler */}
        <AuthErrorHandler />
        
        {/* Global lesson status automation */}
        {isAuthenticated && (
          <LessonStatusAutomation />
        )}
        
        {/* Global notification panel */}
        {isAuthenticated && (
          <NotificationPanel />
        )}
      </div>
    </ThemeProvider>
  );
}

export default App;