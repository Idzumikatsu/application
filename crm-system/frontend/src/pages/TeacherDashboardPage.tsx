import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { Routes, Route, useNavigate } from 'react-router-dom';
import {
  Container,
  Box,
  Typography,
  Tabs,
  Tab,
  AppBar,
  Toolbar,
  Chip,
  Avatar,
  Badge,
  IconButton,
  Menu,
  MenuItem,
} from '@mui/material';
import {
  Notifications as NotificationsIcon,
  AccountCircle as AccountCircleIcon,
  ExitToApp as LogoutIcon,
  Dashboard as DashboardIcon,
} from '@mui/icons-material';
import { RootState } from '../store';
import TeacherSchedulePage from './TeacherSchedulePage';
import TeacherLessonsPage from './TeacherLessonsPage';
import TeacherStudentsPage from './TeacherStudentsPage';
import TeacherStatisticsPage from './TeacherStatisticsPage';
import TeacherAvailabilityPage from './TeacherAvailabilityPage';
import TeacherNotificationsPage from './TeacherNotificationsPage';
import { logout } from '../store/authSlice';
import { setNotifications } from '../store/notificationSlice';

const TeacherDashboardPage: React.FC = () => {
  const { user } = useSelector((state: RootState) => state.auth);
  const { notifications } = useSelector((state: RootState) => state.notifications);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  
  const [activeTab, setActiveTab] = useState(0);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [notificationsAnchorEl, setNotificationsAnchorEl] = useState<null | HTMLElement>(null);

  useEffect(() => {
    if (user?.id) {
      // TODO: Implement fetch notifications logic
      // For now, we'll use empty notifications
      dispatch(setNotifications([]));
    }
  }, [user?.id, dispatch]);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
    switch (newValue) {
      case 0:
        navigate('/teacher/dashboard');
        break;
      case 1:
        navigate('/teacher/schedule');
        break;
      case 2:
        navigate('/teacher/lessons');
        break;
      case 3:
        navigate('/teacher/students');
        break;
      case 4:
        navigate('/teacher/availability');
        break;
      case 5:
        navigate('/teacher/statistics');
        break;
    }
  };

  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleProfileMenuClose = () => {
    setAnchorEl(null);
  };

  const handleNotificationsMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setNotificationsAnchorEl(event.currentTarget);
  };

  const handleNotificationsMenuClose = () => {
    setNotificationsAnchorEl(null);
  };

  const handleLogout = () => {
    dispatch(logout());
    navigate('/login');
    handleProfileMenuClose();
  };

  const handleNavigateToProfile = () => {
    navigate('/profile');
    handleProfileMenuClose();
  };

  const unreadNotifications = notifications.filter(n => !n.readAt).length;

  const tabLabels = [
    '–ì–ª–∞–≤–Ω–∞—è',
    '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
    '–£—Ä–æ–∫–∏',
    '–°—Ç—É–¥–µ–Ω—Ç—ã',
    '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
    '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
  ];

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>
      <AppBar position="static" elevation={2}>
        <Toolbar>
          <DashboardIcon sx={{ mr: 2 }} />
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
          </Typography>
          
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconButton
              size="large"
              color="inherit"
              onClick={handleNotificationsMenuOpen}
            >
              <Badge badgeContent={unreadNotifications} color="error">
                <NotificationsIcon />
              </Badge>
            </IconButton>
            
            <Chip
              avatar={<Avatar>{user?.firstName?.[0]}{user?.lastName?.[0]}</Avatar>}
              label={`${user?.firstName} ${user?.lastName}`}
              variant="outlined"
              onClick={handleProfileMenuOpen}
              clickable
            />
          </Box>
        </Toolbar>

        <Tabs 
          value={activeTab} 
          onChange={handleTabChange}
          indicatorColor="secondary"
          textColor="inherit"
          variant="scrollable"
          scrollButtons="auto"
          sx={{ 
            bgcolor: 'primary.dark',
            '& .MuiTab-root': { 
              minWidth: 'auto',
              px: 2,
              fontSize: '0.875rem'
            }
          }}
        >
          {tabLabels.map((label, index) => (
            <Tab 
              key={index} 
              label={label}
              sx={{ 
                fontWeight: activeTab === index ? 'bold' : 'normal',
                opacity: activeTab === index ? 1 : 0.8
              }}
            />
          ))}
        </Tabs>
      </AppBar>
      
      <Box sx={{ flexGrow: 1, overflow: 'auto', bgcolor: 'grey.50' }}>
        <Routes>
          <Route path="/dashboard" element={<TeacherDashboardOverview />} />
          <Route path="/schedule" element={<TeacherSchedulePage />} />
          <Route path="/lessons" element={<TeacherLessonsPage />} />
          <Route path="/students" element={<TeacherStudentsPage />} />
          <Route path="/availability" element={<TeacherAvailabilityPage />} />
          <Route path="/statistics" element={<TeacherStatisticsPage />} />
          <Route path="/notifications" element={<TeacherNotificationsPage />} />
          <Route path="/" element={<TeacherDashboardOverview />} />
        </Routes>
      </Box>

      {/* Profile Menu */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleProfileMenuClose}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <MenuItem onClick={handleNavigateToProfile}>
          <AccountCircleIcon sx={{ mr: 1 }} />
          –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        </MenuItem>
        <MenuItem onClick={handleLogout}>
          <LogoutIcon sx={{ mr: 1 }} />
          –í—ã–π—Ç–∏
        </MenuItem>
      </Menu>

      {/* Notifications Menu */}
      <Menu
        anchorEl={notificationsAnchorEl}
        open={Boolean(notificationsAnchorEl)}
        onClose={handleNotificationsMenuClose}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <MenuItem onClick={() => navigate('/teacher/notifications')}>
          –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </MenuItem>
        {notifications.slice(0, 5).map((notification) => (
          <MenuItem key={notification.id} onClick={handleNotificationsMenuClose}>
            <Box sx={{ maxWidth: 300 }}>
              <Typography variant="body2" noWrap>
                {notification.title}
              </Typography>
              <Typography variant="caption" color="textSecondary" noWrap>
                {notification.message}
              </Typography>
            </Box>
          </MenuItem>
        ))}
        {notifications.length === 0 && (
          <MenuItem disabled>
            <Typography variant="body2" color="textSecondary">
              –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            </Typography>
          </MenuItem>
        )}
      </Menu>
    </Box>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–∑–æ—Ä–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const TeacherDashboardOverview: React.FC = () => {
  const { user } = useSelector((state: RootState) => state.auth);
  const navigate = useNavigate();

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" gutterBottom>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.firstName}!
        </Typography>
        <Typography variant="body1" color="textSecondary">
          –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        </Typography>
      </Box>

      <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: 3 }}>
        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */}
        <Box 
          sx={{ 
            p: 3, 
            bgcolor: 'white', 
            borderRadius: 2, 
            boxShadow: 1,
            cursor: 'pointer',
            '&:hover': { boxShadow: 3 }
          }}
          onClick={() => navigate('/teacher/schedule')}
        >
          <Typography variant="h6" gutterBottom>
            üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
          </Typography>
          <Typography variant="body2" color="textSecondary">
            –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤
          </Typography>
        </Box>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ */}
        <Box 
          sx={{ 
            p: 3, 
            bgcolor: 'white', 
            borderRadius: 2, 
            boxShadow: 1,
            cursor: 'pointer',
            '&:hover': { boxShadow: 3 }
          }}
          onClick={() => navigate('/teacher/students')}
        >
          <Typography variant="h6" gutterBottom>
            üë• –ú–æ–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã
          </Typography>
          <Typography variant="body2" color="textSecondary">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          </Typography>
        </Box>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ */}
        <Box 
          sx={{ 
            p: 3, 
            bgcolor: 'white', 
            borderRadius: 2, 
            boxShadow: 1,
            cursor: 'pointer',
            '&:hover': { boxShadow: 3 }
          }}
          onClick={() => navigate('/teacher/availability')}
        >
          <Typography variant="h6" gutterBottom>
            ‚è∞ –°–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
          </Typography>
          <Typography variant="body2" color="textSecondary">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
          </Typography>
        </Box>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        <Box 
          sx={{ 
            p: 3, 
            bgcolor: 'white', 
            borderRadius: 2, 
            boxShadow: 1,
            cursor: 'pointer',
            '&:hover': { boxShadow: 3 }
          }}
          onClick={() => navigate('/teacher/statistics')}
        >
          <Typography variant="h6" gutterBottom>
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          </Typography>
          <Typography variant="body2" color="textSecondary">
            –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          </Typography>
        </Box>
      </Box>
    </Container>
  );
};

export default TeacherDashboardPage;