name: CRM System CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_DB: testdb
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd "pg_isready -h localhost -p 5432 -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4.5.0
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'

    - name: Build and test backend
      env:
        DATABASE_URL: jdbc:postgresql://${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        DATABASE_USERNAME: ${{ env.POSTGRES_USER }}
        DATABASE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        cd crm-system
        mvn clean test -Dspring.profiles.active=test

    - name: Upload test results
      uses: actions/upload-artifact@v4.3.5
      if: always()
      with:
        name: backend-test-results
        path: crm-system/target/surefire-reports/

    - name: Upload coverage report
      uses: actions/upload-artifact@v4.3.5
      if: always()
      with:
        name: backend-coverage-report
        path: crm-system/target/site/jacoco/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: backend-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4.1.0
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: crm-system/frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd crm-system/frontend
        npm ci

    - name: Run unit tests
      run: |
        cd crm-system/frontend
        npm test -- --coverage --watchAll=false

    - name: Upload test results
      uses: actions/upload-artifact@v4.3.5
      if: always()
      with:
        name: frontend-test-results
        path: crm-system/frontend/coverage/

    - name: Build frontend
      run: |
        cd crm-system/frontend
        npm run build

    - name: Upload frontend build
      uses: actions/upload-artifact@v4.3.5
      with:
        name: frontend-build
        path: crm-system/frontend/build/
        retention-days: 1


  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4.5.0
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4.1.0
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: crm-system/frontend/package-lock.json

    - name: Build backend JAR
      run: |
        cd crm-system
        mvn clean package -DskipTests
        cp target/crm-system-0.0.1-SNAPSHOT.jar ../crm-system.jar

    - name: Download frontend build
      uses: actions/download-artifact@v4.1.7
      with:
        name: frontend-build
        path: .

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4.3.5
      with:
        name: deployment-artifacts
        path: |
          crm-system.jar
          crm-system/frontend/build/
          scripts/
        retention-days: 7

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: github.ref == 'refs/heads/master'
    
    env:
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      DEPLOY_PATH: /opt/crm-synergy

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0

    - name: Download deployment artifacts
      uses: actions/download-artifact@v4.1.7
      with:
        name: deployment-artifacts
        path: artifacts

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Copy deployment script to server
      run: |
        echo "Copying deployment script to server..."
        scp -o StrictHostKeyChecking=no \
            scripts/deploy-and-restart.sh \
            $DEPLOY_USER@$DEPLOY_HOST:/tmp/deploy-and-restart.sh
        
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          set -e
          sudo cp /tmp/deploy-and-restart.sh /usr/local/bin/deploy-and-restart.sh
          sudo chmod +x /usr/local/bin/deploy-and-restart.sh
          sudo chown root:root /usr/local/bin/deploy-and-restart.sh
          echo "Deployment script installed successfully"
        EOF

    - name: Copy artifacts to server
      run: |
        echo "Copying deployment artifacts to server..."
        
        # Создаем временную директорию на сервере
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          set -e
          mkdir -p /tmp/deployment-artifacts
          echo "Temporary directory created"
        EOF
        
        # Копируем backend JAR
        scp -o StrictHostKeyChecking=no \
            artifacts/crm-system.jar \
            $DEPLOY_USER@$DEPLOY_HOST:/tmp/deployment-artifacts/crm-system.jar
        
        # Копируем frontend build
        scp -o StrictHostKeyChecking=no -r \
            artifacts/crm-system/frontend/build/ \
            $DEPLOY_USER@$DEPLOY_HOST:/tmp/deployment-artifacts/frontend-build/

    - name: Execute automated deployment
      run: |
        echo "Executing automated deployment with restart..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          set -e
          echo "Starting automated deployment process..."
          
          # Выполняем деплой с автоматическим перезапуском
          sudo /usr/local/bin/deploy-and-restart.sh \
            --jar /tmp/deployment-artifacts/crm-system.jar \
            --frontend /tmp/deployment-artifacts/frontend-build
          
          echo "Deployment execution completed"
        EOF

    - name: Cleanup temporary files
      run: |
        echo "Cleaning up temporary files..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          set -e
          rm -rf /tmp/deployment-artifacts
          rm -f /tmp/deploy-and-restart.sh
          echo "Temporary files cleaned up"
        EOF

    - name: Final deployment verification
      run: |
        echo "Performing final deployment verification..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          set -e
          echo "=== Final Deployment Status ==="
          echo "Backend service status:"
          sudo systemctl status crm-synergy-backend.service --no-pager -l | head -5
          
          echo "Backend health check:"
          curl -s -f https://crm-synergy.ru/api/actuator/health | grep status || echo "Health check unavailable"
          
          echo "Frontend directory:"
          ls -la $DEPLOY_PATH/frontend-dist/ | head -3
          
          echo "Application version:"
          sudo ls -la $DEPLOY_PATH/crm-system-0.0.1-SNAPSHOT.jar
          
          echo "=== Deployment Completed Successfully ==="
        EOF
        
        echo "🎉 CRM System deployed and restarted successfully!"