name: CRM System CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_DB: testdb
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd "pg_isready -h localhost -p 5432 -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4.5.0
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'

    - name: Build and test backend
      env:
        DATABASE_URL: jdbc:postgresql://${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        DATABASE_USERNAME: ${{ env.POSTGRES_USER }}
        DATABASE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        cd crm-system
        mvn clean test -Dspring.profiles.active=test

    - name: Upload test results
      uses: actions/upload-artifact@v4.3.5
      if: always()
      with:
        name: backend-test-results
        path: crm-system/target/surefire-reports/

    - name: Upload coverage report
      uses: actions/upload-artifact@v4.3.5
      if: always()
      with:
        name: backend-coverage-report
        path: crm-system/target/site/jacoco/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: backend-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4.1.0
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: crm-system/frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd crm-system/frontend
        npm ci

    - name: Run unit tests
      run: |
        cd crm-system/frontend
        npm test -- --coverage --watchAll=false

    - name: Upload test results
      uses: actions/upload-artifact@v4.3.5
      if: always()
      with:
        name: frontend-test-results
        path: crm-system/frontend/coverage/

    - name: Build frontend
      run: |
        cd crm-system/frontend
        npm run build

    - name: Verify frontend build exists
      run: |
        cd crm-system/frontend
        if [ -d "build" ]; then
          echo "Frontend build directory exists"
          ls -la build/
        else
          echo "ERROR: Frontend build directory does not exist!"
          exit 1
        fi


  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./crm-system
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./crm-system/frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for email-service
      id: meta-email
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/email-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push email-service image
      uses: docker/build-push-action@v5
      with:
        context: ./crm-system/email-service
        push: true
        tags: ${{ steps.meta-email.outputs.tags }}
        labels: ${{ steps.meta-email.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for telegram-service
      id: meta-telegram
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/telegram-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push telegram-service image
      uses: docker/build-push-action@v5
      with:
        context: ./crm-system/telegram-service
        push: true
        tags: ${{ steps.meta-telegram.outputs.tags }}
        labels: ${{ steps.meta-telegram.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload docker-compose and config files
      uses: actions/upload-artifact@v4.3.5
      with:
        name: deployment-config
        path: |
          docker-compose.yml
          .env
          .env.production
          traefik/
          scripts/
        retention-days: 7

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: github.ref == 'refs/heads/master'

    env:
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      DEPLOY_PATH: /opt/crm-synergy
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: crm_system
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_BOT_USERNAME: ${{ secrets.TELEGRAM_BOT_USERNAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0

    - name: Download deployment config
      uses: actions/download-artifact@v4.1.7
      with:
        name: deployment-config
        path: config

    - name: Install envsubst
      run: sudo apt-get update && sudo apt-get install -y gettext-base

    - name: Create production environment file
      run: |
        cd config
        envsubst < .env.production > .env.production.tmp
        mv .env.production.tmp .env.production

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Copy deployment configuration to server
      run: |
        echo "Copying Docker deployment configuration to server..."

        # Создаем целевую директорию на сервере
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "mkdir -p /tmp/docker-config/"

        # Копируем конфигурацию
        scp -o StrictHostKeyChecking=no -r \
            config/ \
            $DEPLOY_USER@$DEPLOY_HOST:/tmp/docker-config/

    - name: Deploy with Docker Compose
      run: |
        echo "Starting Docker deployment process..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << EOF
          set -e
          echo "=== Starting Docker Deployment ==="

          # Переходим в директорию с конфигурацией
          cd /tmp/docker-config/config

          # Авторизуемся в registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login $REGISTRY -u ${{ github.actor }} --password-stdin

          # Создаем backup базы данных
          echo "Creating database backup..."
          mkdir -p $DEPLOY_PATH/backups
          TIMESTAMP=\$(date +%Y%m%d_%H%M%S)

          # Backup PostgreSQL data volume
          if docker volume ls | grep -q postgres_data; then
            echo "Backing up PostgreSQL volume..."
            docker run --rm -v postgres_data:/source -v $DEPLOY_PATH/backups:/backup alpine tar czf /backup/postgres_backup_\$TIMESTAMP.tar.gz -C /source .
          fi

          # Останавливаем текущие контейнеры
          echo "Stopping current containers..."
          docker compose --env-file .env.production down || true

          # Pull новых образов
          echo "Pulling new Docker images..."
          docker compose --env-file .env.production pull

          # Запускаем новые контейнеры
          echo "Starting new containers..."
          docker compose --env-file .env.production up -d

          # Ждем запуска всех сервисов
          echo "Waiting for services to start..."
          sleep 45

          # Проверяем здоровье всех сервисов
          echo "Checking service health..."

          # Backend health check
          echo "Backend health check:"
          if docker compose exec -T backend curl -f http://localhost:8080/actuator/health; then
            echo "✅ Backend is healthy"
          else
            echo "❌ Backend health check failed"
            exit 1
          fi

          # Frontend health check
          echo "Frontend health check:"
          if docker compose exec -T frontend curl -f http://localhost:80; then
            echo "✅ Frontend is healthy"
          else
            echo "❌ Frontend health check failed"
            exit 1
          fi

          # PostgreSQL health check
          echo "PostgreSQL health check:"
          if docker compose exec -T postgres pg_isready -U \$${POSTGRES_USER} -d \$${POSTGRES_DB}; then
            echo "✅ PostgreSQL is healthy"
          else
            echo "❌ PostgreSQL health check failed"
            exit 1
          fi

          # Email service health check (if exists)
          echo "Email service health check:"
          if docker compose ps | grep -q email-service; then
            if docker compose exec -T email-service curl -f http://localhost:8081/actuator/health; then
              echo "✅ Email service is healthy"
            else
              echo "❌ Email service health check failed"
              exit 1
            fi
          else
            echo "⚠️ Email service not running"
          fi

          # Telegram service health check (if exists)
          echo "Telegram service health check:"
          if docker compose ps | grep -q telegram-service; then
            if docker compose exec -T telegram-service curl -f http://localhost:8082/actuator/health; then
              echo "✅ Telegram service is healthy"
            else
              echo "❌ Telegram service health check failed"
              exit 1
            fi
          else
            echo "⚠️ Telegram service not running"
          fi

          echo "=== Docker Deployment Completed Successfully ==="
        EOF

    - name: Final deployment verification
      run: |
        echo "Performing final deployment verification..."
        ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << EOF
          set -e
          echo "=== Final Deployment Status ==="
          echo "Docker containers:"
          docker ps --format "table {{.Names}}	{{.Status}}	{{.Ports}}"

          echo "Docker images:"
          docker images $REGISTRY/$IMAGE_NAME/*

          echo "Docker volumes:"
          docker volume ls

          echo "Container logs (last 20 lines):"
          cd /tmp/docker-config/config && docker compose logs --tail=20

          echo "Disk usage:"
          df -h $DEPLOY_PATH

          echo "=== Deployment Completed Successfully ==="
        EOF

        echo "🎉 CRM System deployed with Docker successfully!"