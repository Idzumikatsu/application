name: CRM System CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '20'
  POSTGRES_DB: testdb
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test
  REGISTRY: ghcr.io
  IMAGE_NAME: idzumikatsu/application

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

    - name: Setup npm cache
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Install rollup native module for CI environment
      run: |
        cd frontend
        npm install --no-save @rollup/rollup-linux-x64-gnu

    - name: TypeScript check
      run: |
        cd frontend
        npx tsc --noEmit

    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage
      env:
        CI: true

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: frontend/coverage

    - name: Verify frontend build exists
      run: |
        cd frontend
        if [ -d "dist" ]; then
          echo "Frontend build directory exists"
          ls -la dist/
        else
          echo "ERROR: Frontend build directory does not exist!"
          exit 1
        fi

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/crm-system/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} >/dev/null 2>&1; then
            echo "PostgreSQL is ready!"
            exit 0
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done
        echo "PostgreSQL not ready in time"
        exit 1

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Build and test backend
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/${{ env.POSTGRES_DB }}
        DATABASE_USERNAME: ${{ env.POSTGRES_USER }}
        DATABASE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        cd crm-system
        mvn clean test -Dspring.profiles.active=test -DskipTests=false -Dmaven.test.failure.ignore=true -Djacoco.skip=false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: crm-system/target/surefire-reports/

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-coverage-report
        path: crm-system/target/site/jacoco/

  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend image
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./crm-system
        file: ./crm-system/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend image
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for email-service image
      id: meta-email
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/email-service

    - name: Build and push email-service image
      uses: docker/build-push-action@v5
      with:
        context: ./email-service
        file: ./email-service/Dockerfile
        push: true
        tags: ${{ steps.meta-email.outputs.tags }}
        labels: ${{ steps.meta-email.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify email-service image push
      run: |
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/email-service:latest"
        if docker manifest inspect $IMAGE >/dev/null 2>&1; then
          echo "‚úÖ email-service pushed successfully"
        else
          echo "‚ùå email-service push failed - check Dockerfile/pom.xml in email-service/"
          ls -la email-service/ || echo "Directory missing!"
          exit 1
        fi

    - name: Extract metadata for telegram-service image
      id: meta-telegram
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/telegram-service

    - name: Build and push telegram-service image
      uses: docker/build-push-action@v5
      with:
        context: ./telegram-service
        file: ./telegram-service/Dockerfile
        push: true
        tags: ${{ steps.meta-telegram.outputs.tags }}
        labels: ${{ steps.meta-telegram.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if SSH secrets are available
      run: |
        echo "Checking if SSH secrets are configured..."
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "SSH_PRIVATE_KEY is not set"
        else
          echo "SSH_PRIVATE_KEY is configured (length: ${#SSH_PRIVATE_KEY})"
        fi
        
        if [ -z "${{ secrets.PRODUCTION_USER }}" ]; then
          echo "PRODUCTION_USER is not set"
        else
          echo "PRODUCTION_USER is configured"
        fi
        
        if [ -z "${{ secrets.PRODUCTION_HOST }}" ]; then
          echo "PRODUCTION_HOST is not set"
        else
          echo "PRODUCTION_HOST is configured"
        fi

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection to production server..."
        if [ -n "${{ secrets.PRODUCTION_HOST }}" ] && [ -n "${{ secrets.PRODUCTION_USER }}" ]; then
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "echo 'SSH connection successful'" || echo "SSH connection failed"
        else
          echo "Skipping SSH test - missing host or user configuration"
        fi

    - name: Deploy with Docker Compose
      run: |
        echo "Starting deployment process..."
        if [ -z "${{ secrets.PRODUCTION_HOST }}" ] || [ -z "${{ secrets.PRODUCTION_USER }}" ] || [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "‚ùå Deployment failed: Missing required secrets"
          echo "Please configure SSH_PRIVATE_KEY, PRODUCTION_USER, and PRODUCTION_HOST in GitHub Actions secrets"
          exit 1
        fi
        
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
        echo "‚úÖ Connected to production server"
        cd /opt/application || (echo "‚ùå Failed to change directory" && exit 1)
        echo "üîç Pulling latest code from repository"
        git pull origin master || (echo "‚ùå Failed to pull latest code" && exit 1)
        echo "üîç Pulling latest Docker images"
        docker compose pull || (echo "‚ùå Failed to pull Docker images" && exit 1)
        echo "üöÄ Starting containers"
        docker compose up -d --remove-orphans --force-recreate || (echo "‚ùå Failed to start containers" && exit 1)
        echo "‚è≥ Waiting for containers to start"
        sleep 120
        echo "üìã Checking container status"
        docker compose ps
        echo "üìã Getting container logs"
        docker compose logs --tail=20
        # Basic health check
        if docker compose exec backend curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
          echo '‚úÖ Backend healthy'
        else
          echo '‚ùå Backend health check failed'
          docker compose logs backend
          exit 1
        fi
        EOF
        cd /opt/application
        git pull origin master
        docker compose pull
        docker compose up -d --remove-orphans --force-recreate
        sleep 120
        docker compose ps
        docker compose logs --tail=20
        # Basic health check
        if docker compose exec backend curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
          echo '‚úÖ Backend healthy'
        else
          echo '‚ùå Backend health check failed'
          docker compose logs backend
          exit 1
        fi
        EOF